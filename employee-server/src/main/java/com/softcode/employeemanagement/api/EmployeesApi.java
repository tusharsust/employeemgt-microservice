/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.softcode.employeemanagement.api;

import com.softcode.employeemanagement.model.Employee;
import com.softcode.employeemanagement.model.PutEmployeeRequest;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.context.request.NativeWebRequest;

import javax.annotation.Generated;
import javax.validation.Valid;
import java.util.List;
import java.util.Optional;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-12-24T21:30:51.511249+06:00[Asia/Dhaka]")
@Validated
@Tag(name = "employees", description = "")
public interface EmployeesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /employees/{id} : Delete an employee record
     * 
     *
     * @param id  (required)
     * @return Sucessfully removed employee record (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Employee not found (status code 404)
     */
    @Operation(
        operationId = "deleteEmployee",
        summary = "Delete an employee record",
        tags = { "Employees" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Sucessfully removed employee record"),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "Employee not found")
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/employees/{id}"
    )
    default ResponseEntity<Void> deleteEmployee(
        @Parameter(name = "id", description = "", required = true) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /employees/{id} : Get employee by id
     * 
     *
     * @param id  (required)
     * @return Employee (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Employee not found (status code 404)
     */
    @Operation(
        operationId = "getEmployee",
        summary = "Get employee by id",
        tags = { "Employees" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Employee", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Employee.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "Employee not found")
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/employees/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Employee> getEmployee(
        @Parameter(name = "id", description = "", required = true) @PathVariable("id") Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"phone\" : \"+46701234567\", \"name\" : \"John Doe\", \"joiningDate\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : 10000000, \"email\" : \"john.doe@softcode.se\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /employees : Get all employees
     * 
     *
     * @return All employees (status code 200)
     */
    @Operation(
        operationId = "getEmployees",
        summary = "Get all employees",
        tags = { "Employees" },
        responses = {
            @ApiResponse(responseCode = "200", description = "All employees", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Employee.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/employees",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Employee>> getEmployees(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"phone\" : \"+46701234567\", \"name\" : \"John Doe\", \"joiningDate\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : 10000000, \"email\" : \"john.doe@softcode.se\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /employees : Add new employee record
     * 
     *
     * @param putEmployeeRequest  (required)
     * @return Successfully created employee record(s) (status code 201)
     *         or Invalid input (status code 405)
     */
    @Operation(
        operationId = "postEmployee",
        summary = "Add new employee record",
        tags = { "Employees" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Successfully created employee record(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PutEmployeeRequest.class))
            }),
            @ApiResponse(responseCode = "405", description = "Invalid input")
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/employees",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<PutEmployeeRequest> postEmployee(
        @Parameter(name = "PutEmployeeRequest", description = "", required = true) @Valid @RequestBody Employee putEmployeeRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /employees : Update an employee record
     * 
     *
     * @param putEmployeeRequest  (required)
     * @return Successfully updated employee(s) (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Employee not found (status code 404)
     *         or Validation exception (status code 405)
     */
    @Operation(
        operationId = "putEmployee",
        summary = "Update an employee record",
        tags = { "Employees" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully updated employee(s)"),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "Employee not found"),
            @ApiResponse(responseCode = "405", description = "Validation exception")
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/employees",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> putEmployee(
        @Parameter(name = "PutEmployeeRequest", description = "", required = true) @Valid @RequestBody Employee putEmployeeRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
